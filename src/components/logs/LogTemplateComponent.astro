---
//レイアウト
import LogBaseLayout from "@layouts/logs/LogBaseLayout.astro";

//コンポーネント
import Gauge from "@components/logs/Gauge.astro";
import Still from "@components/logs/Still.astro";
import AllayData from "@components/logs/AllayData.astro";
import EnemyData from "@components/logs/EnemyData.astro";

import Section from "@layouts/logs/Section.astro";
import Message from "@layouts/logs/Message.astro";
import Request from "@layouts/logs/Request.astro";
import Note from "@layouts/logs/Note.astro";

// モジュール
import { ElementTypes } from "@modules/elementTypes";
import TimeLine from "./TimeLine.astro";

import { SectionData } from "@modules/sectionData";

import { getCollection, getEntries, getEntry } from "astro:content";

const { sessionId } = Astro.props;

const collections = await getCollection("sessionLog");
const data = collections
  .filter((el) => el.id.includes(sessionId))
  // sectionNum順に中身を表示するために事前にソート
  .sort((a, b) => a.data.sectionNum - b.data.sectionNum)
  .map((el) => {
    //console.log(el.data.charaData);
    return new SectionData(
      el.data.title,
      el.data.data,
      el.data.sectionNum,
      el.data.sectionType ? el.data.sectionType : "normal",
      el.data.charaData ? el.data.charaData : []
    );
  });

const logData = await getEntry("sessionData", `${sessionId}/logData`).then(
  (res) => res ? res.data : ''
);

const sections = data;

//console.log(sections);

---

<LogBaseLayout sections={sections} logData={logData}>
  {
    sections.map((el, i) => (
      <Section
        title={el.title}
        sectionType={el.sectionType}
        num={el.sectionNum}
        charaData={el.charaData}
      >
        {el.content.map((msg) =>
          msg.type === ElementTypes.message ? (
            <Message
              tabNum={msg.tabNum}
              color={msg.color}
              name={msg.name}
              timestamp={msg.timestamp}
            >
              <Fragment set:html={msg.content} />
            </Message>
          ) : msg.type === ElementTypes.still ? (
            <Still
              picSrc={msg.imageSrc}
              alt={msg.alt}
              caption={msg.caption}
              isPortrait={msg.isPortrait}
            />
          ) : msg.type === ElementTypes.request ? (
            <Request title={msg.title}>
              {msg.content.length > 1 ? (
                <Fragment set:html={msg.content.join("<br/>")} />
              ) : (
                <Fragment set:html={msg.content[0]} />
              )}
            </Request>
          ) : msg.type === ElementTypes.note ? (
            <Note title={msg.title}>
              {msg.content.length > 1 ? (
                <Fragment set:html={msg.content.join("<br/>")} />
              ) : (
                <Fragment set:html={msg.content[0]} />
              )}
            </Note>
          ) : msg.type === ElementTypes.timeline ? (
            <TimeLine timeline={msg.data} />
          ) : msg.type === ElementTypes.allayData ? (
            <AllayData dataSrc={msg.dataSrc} />
          ) : (
            msg.type === ElementTypes.enemyData && (
              <EnemyData dataSrc={msg.dataSrc} />
            )
          )
        )}
      </Section>
    ))
  }
</LogBaseLayout>
